<?php

namespace Drupal\sir\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\sir\Constant;
use Drupal\sir\Utils;
use Drupal\sir\Entity\Tables;
use Drupal\sir\Vocabulary\VSTOI;

class AddDetectorForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'add_detector_form';
  }

  protected $sourceDetectorUri;

  protected $sourceDetector;

  protected $attachmentUri;

  protected $attachment;

  public function getSourceDetectorUri() {
    return $this->sourceDetectorUri;
  }

  public function setSourceDetectorUri($uri) {
    return $this->sourceDetectorUri = $uri; 
  }

  public function getSourceDetector() {
    return $this->sourceDetector;
  }

  public function setSourceDetector($obj) {
    return $this->sourceDetector = $obj; 
  }

  public function getAttachmentUri() {
    return $this->attachmentUri;
  }

  public function setAttachmentUri($attachuri) {
    return $this->attachmentUri = $attachuri; 
  }

  public function getAttachment() {
    return $this->attachment;
  }

  public function setAttachment($attachobj) {
    return $this->attachment = $attachobj; 
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state, $sourcedetectoruri = NULL, $attachmenturi = NULL) {

    // ESTABLISH API SERVICE
    $fusekiAPIservice = \Drupal::service('sir.api_connector');

    // HANDLE SOURCE DETECTOR,  IF ANY
    $sourceuri=$sourcedetectoruri;
    if ($sourceuri === NULL || $sourceuri === 'EMPTY') {
      $this->setSourceDetector(NULL);
      $this->setSourceDetectorUri('');
    } else {
      $sourceuri_decode=base64_decode($sourceuri);
      $this->setSourceDetectorUri($sourceuri_decode);
      $rawresponse = $fusekiAPIservice->getUri($this->getSourceDetectorUri());
      //dpm($rawresponse);
      $obj = json_decode($rawresponse);
      if ($obj->isSuccessful) {
        $this->setSourceDetector($obj->body);
        #dpm($this->getDetector());
      } else {
        $this->setSourceDetector(NULL);
        $this->setSourceDetectorUri('');
      }
    }
    $disabledDerivationOption = ($this->getSourceDetector() === NULL);

    // HANDLE ATTACHMENT, IF ANY
    $attachuri=$attachmenturi;
    if ($attachuri === NULL || $attachuri === 'EMPTY') {
      $this->setAttachment(NULL);
      $this->setAttachmentUri('');
    } else {
      $attachuri_decode=base64_decode($attachuri);
      $this->setAttachmentUri($attachuri_decode);
      if ($this->getAttachmentUri() != NULL) {
        $attachrawresponse = $fusekiAPIservice->getUri($this->getAttachmentUri());
        $attachobj = json_decode($attachrawresponse);
        if ($attachobj->isSuccessful) {
          $this->setAttachment($attachobj->body);
        }
      }
    }

    $tables = new Tables;
    $languages = $tables->getLanguages();
    $derivations = $tables->getGenerationActivities();

    $sourceContent = '';
    if ($this->getSourceDetector() != NULL) {
      $sourceContent = $this->getSourceDetector()->hasContent;
    }

    $form['detector_content'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Content'),
    ];
    $form['detector_codebook'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Codebook'),
      '#autocomplete_route_name' => 'sir.detector_codebook_autocomplete',
    ];
    $form['detector_language'] = [
      '#type' => 'select',
      '#title' => $this->t('Language'),
      '#options' => $languages,
      '#default_value' => 'en',
    ];
    $form['detector_version'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Version'),
    ];
    $form['detector_description'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Description'),
    ];
    $form['detector_was_derived_from'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Was Derived From'),
      '#default_value' => $sourceContent,
      '#disabled' => TRUE,
    ];
    $form['detector_was_generated_by'] = [
      '#type' => 'select',
      '#title' => $this->t('Was Generated By'),
      '#options' => $derivations,
      '#default_value' => Constant::DEFAULT_WAS_GENERATED_BY,
      '#disabled' => $disabledDerivationOption,
    ];
    $form['save_submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save'),
      '#name' => 'save',
    ];
    $form['cancel_submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Cancel'),
      '#name' => 'back',
    ];
    $form['bottom_space'] = [
      '#type' => 'item',
      '#title' => t('<br><br>'),
    ];

    return $form;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    $submitted_values = $form_state->cleanValues()->getValues();
    $triggering_element = $form_state->getTriggeringElement();
    $button_name = $triggering_element['#name'];

    if ($button_name != 'back') {
      if(strlen($form_state->getValue('detector_content')) < 1) {
        $form_state->setErrorByName('detector_content', $this->t('Please enter a valid content'));
      }
      if(strlen($form_state->getValue('detector_language')) < 1) {
        $form_state->setErrorByName('detector_language', $this->t('Please enter a valid language'));
      }
      if(strlen($form_state->getValue('detector_version')) < 1) {
        $form_state->setErrorByName('detector_version', $this->t('Please enter a valid version'));
      }
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $submitted_values = $form_state->cleanValues()->getValues();
    $triggering_element = $form_state->getTriggeringElement();
    $button_name = $triggering_element['#name'];

    if ($button_name === 'back') {
      $form_state->setRedirectUrl(Utils::selectBackUrl('detector'));
      return;
    } 

    try {

      $hasCodebook = '';
      if ($form_state->getValue('detector_codebook') != NULL && $form_state->getValue('detector_codebook') != '') {
        $hasCodebook = Utils::uriFromAutocomplete($form_state->getValue('detector_codebook'));
      } 

      $wasDerivedFrom = '';
      if ($this->getSourceDetectorUri() === NULL) {
        $wasDerivedFrom = 'null';
      } else {
        $wasDerivedFrom = $this->getSourceDetectorUri();
      }
      $wasGeneratedBy = $form_state->getValue('detector_was_generated_by');

      $useremail = \Drupal::currentUser()->getEmail();

      // CREATE A NEW DETECTOR
      $newDetectorUri = Utils::uriGen('detector');
      $detectorJson = '{"uri":"'.$newDetectorUri.'",'.
        '"typeUri":"'.VSTOI::DETECTOR.'",'.
        '"hascoTypeUri":"'.VSTOI::DETECTOR.'",'.
        '"hasContent":"'.$form_state->getValue('detector_content').'",'.
        '"hasCodebook":"'.$hasCodebook.'",'.
        '"hasLanguage":"'.$form_state->getValue('detector_language').'",'.
        '"hasVersion":"'.$form_state->getValue('detector_version').'",'.
        '"comment":"'.$form_state->getValue('detector_description').'",'.
        '"wasDerivedFrom":"'.$wasDerivedFrom.'",'.
        '"wasGeneratedBy":"'.$wasGeneratedBy.'",'.
        '"hasSIRManagerEmail":"'.$useremail.'"}';
      $fusekiAPIservice = \Drupal::service('sir.api_connector');
      $fusekiAPIservice->detectorAdd($detectorJson);
      //dpm($resp);
    
      // IF IN THE CONTEXT OF AN EXISTING ATTACHMENT, ATTACH THE NEWLY CREATED DETECTOR TO THE ATTACHMENT
      if ($this->getAttachment() != NULL) {
        $fusekiAPIservice->detectorAttach($newDetectorUri,$this->getAttachmentUri());
        \Drupal::messenger()->addMessage(t("Detector [" . $newDetectorUri ."] has been added and attached to intrument [" . $this->getAttachment()->belongsTo . "] successfully."));
        $url = Url::fromRoute('sir.edit_attachment');
        $url->setRouteParameter('attachmenturi', base64_encode($this->getAttachmentUri()));
        $form_state->setRedirectUrl($url);
        return;
      } else {        
        \Drupal::messenger()->addMessage(t("Detector has been added successfully."));
        $form_state->setRedirectUrl(Utils::selectBackUrl('detector'));
        return;
      }
    } catch(\Exception $e) {
      if ($this->getAttachment() != NULL) {
        \Drupal::messenger()->addMessage(t("An error occurred while adding the Detector: ".$e->getMessage()));
        $url = Url::fromRoute('sir.edit_attachment');
        $url->setRouteParameter('attachmenturi', base64_encode($this->getAttachmentUri()));
        $form_state->setRedirectUrl($url);
      } else {
        \Drupal::messenger()->addMessage(t("An error occurred while adding the Detector: ".$e->getMessage()));
        $form_state->setRedirectUrl(Utils::selectBackUrl('detector'));
        }
    }
  }

}